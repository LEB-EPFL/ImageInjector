/*
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne
 *
 * Author: Marcel Stefko
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ch.epfl.leb.injector;

import java.awt.Color;
import javax.swing.JFileChooser;
import java.io.File;
import org.micromanager.PropertyMap;

/**
 * 
 * Settings GUI for ImageInjectorPlugin.
 *
 * @author Marcel Stefko
 */
public class InjectorSetupWindow extends javax.swing.JDialog {

    /**
     * Creates new form InjectorSetupWindow
     */
    PropertyMap.PropertyMapBuilder builder;
    InjectorConfigurator configurator;
    File tiff_file;
    
    public InjectorSetupWindow(java.awt.Frame parent, boolean modal, 
            InjectorConfigurator configurator) {
        super(parent, modal);
        this.configurator = configurator;
        builder = configurator.getSettings().copy();
        initComponents();
        // load up current value of FPS from ImageStreamer
        frames_per_second.setText(String.valueOf(configurator.context.streamer.getFPS()));
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        frames_per_second = new javax.swing.JTextField();
        OK_button = new javax.swing.JButton();
        choose_file_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        label_filepath = new javax.swing.JLabel();
        l_is_tiff_loaded = new javax.swing.JLabel();
        b_clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Frames per second:");

        frames_per_second.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        frames_per_second.setText("100");
        frames_per_second.setPreferredSize(new java.awt.Dimension(30, 20));

        OK_button.setText("OK");
        OK_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OK_buttonActionPerformed(evt);
            }
        });

        choose_file_button.setText("Choose file...");
        choose_file_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choose_file_buttonActionPerformed(evt);
            }
        });

        jLabel2.setText("Current file:");

        label_filepath.setText("<none>");
        label_filepath.setMaximumSize(new java.awt.Dimension(100, 14));

        l_is_tiff_loaded.setForeground(new java.awt.Color(153, 0, 51));
        l_is_tiff_loaded.setText("Tiff not loaded");

        b_clear.setText("Clear");
        b_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(frames_per_second, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(choose_file_button)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l_is_tiff_loaded)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_clear)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(OK_button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(frames_per_second, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choose_file_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(label_filepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_clear)
                    .addComponent(l_is_tiff_loaded))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(OK_button)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OK_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_buttonActionPerformed
        // Load the FPS value into ImageStreamer
        long FPS;
        try {
            FPS = Long.parseLong(frames_per_second.getText());
        } catch (NumberFormatException ex) {
            configurator.context.app.logs().showError("Wrong input format.");
            return;
        }
        configurator.context.streamer.setFPS(FPS);
        // Set updated PropertyMap in configurator
        configurator.setPropertyMap(builder.build());
        // Hide the GUI and load the new .tiff file into ImageStreamer
        configurator.context.streamer.setFile(tiff_file, this);
        this.setVisible(false);
    }//GEN-LAST:event_OK_buttonActionPerformed

    private void choose_file_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choose_file_buttonActionPerformed
        // File chooser dialog
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(choose_file_button);
        if  (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        // Set the selected file and show in label
        tiff_file = fc.getSelectedFile();
        label_filepath.setText(tiff_file.getName());
    }//GEN-LAST:event_choose_file_buttonActionPerformed

    private void b_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_clearActionPerformed
        setTiffLoaded(false);
        label_filepath.setText("<none>");
        tiff_file = null;
        configurator.context.streamer.setFile(null, null);
    }//GEN-LAST:event_b_clearActionPerformed
    
    public void setTiffLoaded(boolean isLoaded) {
        if (isLoaded) {
            l_is_tiff_loaded.setText("Tiff loaded");
            l_is_tiff_loaded.setForeground(Color.decode("0x006600"));
        } else {
            l_is_tiff_loaded.setText("Tiff not loaded");
            l_is_tiff_loaded.setForeground(Color.decode("0x990033"));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OK_button;
    private javax.swing.JButton b_clear;
    private javax.swing.JButton choose_file_button;
    private javax.swing.JTextField frames_per_second;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel l_is_tiff_loaded;
    private javax.swing.JLabel label_filepath;
    // End of variables declaration//GEN-END:variables
}
